var express = require('express');var router = express.Router();var pgp = require("pg-promise")();var db = pgp("postgres://client:qwerty@localhost:5432/project");var func = require('../func');var time;var d;//var M = 10000,v_max = 10, t0 = 0, t1 = 45, t2 = 450, t3 = 495, t4 = 945, t5 = 990, t6 = 1395, t7 = 1440, step=15, tt = 705;var step = 15;db.many("select * from " +    "( "+    "(select begin_date as begin_time, end_date as end_time " +    "from work_calendars " +    "where descr = 'Change') as t1 " +    "join " +    "(select value as v_max " +    "from params join param_values " +    "on params.param_id = param_values.param_id " +    "where params.name = 'Max speed') as t11 " +    "on 1=1) as t111 " +    "join " +    "(select value as prod " +    "from params join param_values " +    "on params.param_id = param_values.param_id " +    "where params.name = 'Date production' " +    "and " +    "param_values.timestamp = $(time)) as t12 " +    "on 1=1;", {    time: '2018-01-01T00:00'                // realtime})    .then(function (data) {        time = data;        time = JSON.stringify(time);        time = JSON.parse(time);        var M = time[0].prod;        var v_max = time[0].v_max;        var i = 0;        var t = 0;        while(i < 4) {            t = new Date(time[i].begin_time);            time[i].begin_time = t.getHours()*60 + t.getMinutes();            t = new Date(time[i].end_time);            time[i].end_time = t.getHours()*60 + t.getMinutes();            if(time[i].end_time < time[i].begin_time) {     // если end_time на следующий день                time[i].end_time += 24*60;            }            i++;        }        // ФУНКЦИЯ ПОСТРОЕНИЯ ТОЧЕК ЭТАЛОННОГО ГРАФИКА        var x_et = [], y_et = [];        //var v_mid=func.velocity_middle(M,v_max,t0,t1,t2,t3,t4,t5,t6,t7);        var v_mid = func.velocity_middle(M, v_max, time[0].begin_time, time[0].end_time, time[1].begin_time, time[1].end_time, time[2].begin_time, time[2].end_time, time[3].begin_time, time[3].end_time);        var n=1440/step;        //func.etalon_coords(M,t0,t1,t2,t3,t4,t5,t6,t7,step,n,v_mid,x_et,y_et);        func.etalon_coords(M, time[0].begin_time, time[0].end_time, time[1].begin_time, time[1].end_time, time[2].begin_time, time[2].end_time, time[3].begin_time, time[3].end_time, step, n, v_mid, x_et, y_et);        var res_str = '{';        var x;        for(var i = 0; i < 97; i++){            if(parseInt(x_et[i]%60) == 0)                x = parseInt(x_et[i]/60) + ":" + parseInt(x_et[i]%60) + "0";            else                x = parseInt(x_et[i]/60) + ":" + parseInt(x_et[i]%60);            res_str = res_str + '\"' + x + '\":\"' + y_et[i].toFixed(0) + '\",';        }        res_str = res_str.substring(0,res_str.length - 1);        res_str = res_str + "}";        res_str = JSON.parse(res_str);        //console.log(res_str);        router.get('/testajax', function(req, res, next) {            res.send(JSON.stringify(res_str));        });        db.many("select t1.productivity as productivity, t1.time as time, t2.count as count from" +            "(select value as productivity, timestamp as time from params " +            "join param_values on params.param_id = param_values.param_id " +            "where params.name = 'Current production') as t1 " +            "join " +            "(select count(distinct param_value_id)" +            "from param_values " +            "where param_id = 3) as t2" +            " on 1=1;")            .then(function (data) {                d = data;                d = JSON.stringify(d);                d = JSON.parse(d);                var i = 0;                var t = 0;                var mas = [];                var count = d[0].count;                while(i < count) {                    t = new Date(d[i].time);                    mas[i] = t.getHours()*60 + t.getMinutes();                    i++;                    if(i > 0)                        if(mas[i] < mas[i-1])                            mas[i] += 24*60;                }                //console.log(d[0].productivity);                // ФУНКЦИЯ ПОСТРОЕНИЯ ТОЧЕК ТЕКУЩЕГО ГРАФИКА                var x_model = [], y_model = [];                func.simulated_coords(time[0].begin_time, time[0].end_time, time[1].begin_time, time[1].end_time, time[2].begin_time, time[2].end_time, time[3].begin_time, time[3].end_time, n, step, v_mid, v_max, x_model, y_model);                var res_str1 = '{';                for(var i = 0; i < count; i++){                    res_str1 = res_str1 + '\"' + x_model[i] + '\":\"' + d[i].productivity + '\",';                }                res_str1 = res_str1.substring(0,res_str1.length - 1);                res_str1 = res_str1 + "}";                //console.log(res_str1);                res_str1 = JSON.parse(res_str1);                var y_pro = [];                var v_up,dM ;                var res_str3;                console.log(d[count - 1].productivity);                res_str3 = func.correction_production(parseInt(d[count - 1].productivity), mas[count - 1], M, time[0].begin_time, time[0].end_time, time[1].begin_time, time[1].end_time, time[2].begin_time, time[2].end_time, time[3].begin_time, time[3].end_time, v_max, v_mid, step, n, v_up, dM, y_pro);                console.log(res_str3);                var res_str2 = '{';                for(var i = 0; i < count; i++){                    res_str2 = res_str2 + '\"' + x_model[i] + '\":\"' + d[i].productivity + '\",';                }                for(var i = count - 1; i < y_pro.length; i++){                    res_str2 = res_str2 + '\"' + x_model[i] + '\":\"' + y_pro[i].toFixed(0) + '\",';                }                res_str2 = res_str2.substring(0,res_str2.length - 1);                res_str2 = res_str2 + "}";                res_str2 = JSON.parse(res_str2);                res_str3 = JSON.parse(res_str3);                router.get('/testajax1', function(req, res, next) {                    res.send(JSON.stringify(res_str1));                });                router.get('/testajax2', function(req, res, next) {                    res.send(JSON.stringify(res_str2));                });                router.get('/testajax3', function(req, res, next) {                    res.send(res_str3);                });            })            .catch(function (error) {                console.log("ERROR:", error);            });}).catch(function (error) {    console.log("ERROR:", error);});/* GET home page. */router.get('/', function(req, res, next) {    res.render('index', { title: 'Express' });});module.exports = router;