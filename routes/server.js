var express = require('express');var router = express.Router();var pgp = require("pg-promise")();var db = pgp("postgres://client:qwerty@localhost:5432/project");var time;var speed;var productivity;var count;var d;var json = '{"reference_chart":"", "realtime_chart":""}';var ref_json = '{"speed":"0", "productivity":"0", "count":"0", "time": "0"}';var rt_json = '{"productivity":"0", "time": "0"}';json = JSON.parse(json);ref_json = JSON.parse(ref_json);rt_json = JSON.parse(rt_json);//queries to DB/*router.get('/123', function(req, res, next) {    if(!req.query) return res.sendStatus(400);    else    {    */        db.many("select count(*) as v\n" +            "from work_calendars\n" +            "where descr != 'Working';")            .then(function (data) {                count = data;                ref_json.count = count[0].v;                json.reference_chart = ref_json;                //json.reference_chart = JSON.stringify(ref_json);                router.get('/testajax', function(req, res, next) {                    res.send(JSON.stringify(json));                });            })            .catch(function (error) {                console.log("ERROR:", error);            });        db.many("select begin_date as begin_time, end_date as end_time\n" +            "from work_calendars\n" +            "where descr != 'Working';")            .then(function (data) {                time = data;                time = JSON.stringify(time);                time = JSON.parse(time);                var i = 0;                var t = 0;                while(i < 4) {                    t = new Date(time[i].begin_time);                    time[i].begin_time = JSON.stringify(t.getHours()*60 + t.getMinutes());                    t = new Date(time[i].end_time);                    time[i].end_time = JSON.stringify(t.getHours()*60 + t.getMinutes());                    /*                        if(time[i].end_time < time[i].begin_time) {     // если end_time на следующий день                            time[i].end_time += 24*60;                        }                    */                    i++;                }                // ФУНКЦИЯ ПОСТРОЕНИЯ ТОЧЕК ЭТАЛОННОГО ГРАФИКА                ref_json.time = time;                //ref_json = JSON.stringify(ref_json)                json.reference_chart = ref_json;                router.get('/testajax', function(req, res, next) {                    res.send(JSON.stringify(json));                });            })            .catch(function (error) {                console.log("ERROR:", error);            });        db.many("select value from params join param_values " +            "on params.param_id = param_values.param_id " +            "where params.name = 'Max speed';")            .then(function (data) {                speed = data;                ref_json.speed = speed[0].value;                json.reference_chart = ref_json;                router.get('/testajax', function(req, res, next) {                    res.send(JSON.stringify(json));                });            })            .catch(function (error) {                console.log("ERROR:", error);            });        db.many("select value from params join param_values " +            "on params.param_id = param_values.param_id " +            "where params.name = 'Date production';")            .then(function (data) {                productivity = data;                ref_json.productivity = productivity[0].value;                json.reference_chart = ref_json;                router.get('/testajax', function(req, res, next) {                    res.send(JSON.stringify(json));                });            })            .catch(function (error) {                console.log("ERROR:", error);            });        db.many("select value as productivity, timestamp as time from params join param_values " +            "on params.param_id = param_values.param_id " +            "where params.name = 'Current production';")            .then(function (data) {                d = data;                d = JSON.stringify(d);                d = JSON.parse(d);                //console.log(d);                var i = 0;                var t = 0;                while(i < 11) {                    t = new Date(d[i].time);                    d[i].time = JSON.stringify(t.getHours()*60 + t.getMinutes());                    i++;                    // ИСПРАВИТЬ СЛУЧАЙ: d[i-1].time > d[i].time                }                //console.log(d);                // ФУНКЦИЯ ПОСТРОЕНИЯ ТОЧЕК ТЕКУЩЕГО ГРАФИКА                rt_json = d;                //ref_json = JSON.stringify(ref_json)                json.realtime_chart = rt_json;                console.log(json.realtime_chart);                router.get('/testajax', function(req, res, next) {                    res.send(JSON.stringify(json));                });            })            .catch(function (error) {                console.log("ERROR:", error);            });/*    }});*//* GET home page. */router.get('/', function(req, res, next) {    res.render('index', { title: 'Express' });});router.get('/testajax', function(req, res, next) {    res.send(JSON.stringify(json));});module.exports = router;